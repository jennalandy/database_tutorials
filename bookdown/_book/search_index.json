[
["index.html", "Using Databases 1 Preface", " Using Databases 2020-04-23 1 Preface "],
["introduction.html", "2 Introduction", " 2 Introduction "],
["machine-setup.html", "3 Machine Setup 3.1 Linux - Ubuntu 3.2 Mac OS 3.3 Windows 3.4 Other Connection Options", " 3 Machine Setup The manual takes uses the OCDB driver/ connection string method to connnect to the Stats repository. These drivers are proprietary to the SQL service you are using, so they need to be installed for each server type you wish to connect to. Connection strings refers to the passwords and information needed to connect to the database, as well as the format that that information needs to be specified in. Connection strings are also specific to the database you are connecting to. For this example the driver and connection string can be found at the link below. Microsoft SQL Server Drivers can be found at: https://docs.microsoft.com/en-us/sql/connect/odbc/microsoft-odbc-driver-for-sql-server?view=sql-server-ver15 After downloading, the drivers can be installed by running the following commands in a terminal. 3.1 Linux - Ubuntu sudo su curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - #Download appropriate package for the OS version #Choose only ONE of the following, corresponding to your OS version #Ubuntu 16.04 curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list &gt; /etc/apt/sources.list.d/mssql-release.list #Ubuntu 18.04 curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list &gt; /etc/apt/sources.list.d/mssql-release.list #Ubuntu 19.10 curl https://packages.microsoft.com/config/ubuntu/19.10/prod.list &gt; /etc/apt/sources.list.d/mssql-release.list exit sudo apt-get update sudo ACCEPT_EULA=Y apt-get install msodbcsql17 # optional: for bcp and sqlcmd sudo ACCEPT_EULA=Y apt-get install mssql-tools echo &#39;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#39; &gt;&gt; ~/.bash_profile echo &#39;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#39; &gt;&gt; ~/.bashrc source ~/.bashrc # optional: for unixODBC development headers sudo apt-get install unixodbc-dev 3.2 Mac OS /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release brew update HOMEBREW_NO_ENV_FILTERING=1 ACCEPT_EULA=Y brew install msodbcsql17 mssql-tools 3.3 Windows download and open msodbcsql.msi file from: https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15#download-for-windows 3.4 Other Connection Options Once drivers are installed, you can set a dsn (data source name) for the connection to the database using the ODBC/DSN manager for your system. This is OS-specific and while it will allow a single user to access the database more easily, it must be configured for every user who wishes to connect to the data source. Therefore, to more easily share code and to not have to mess with their behind-the-scenes settings, I use the connection string method from here further. "],
["connecting-to-a-database.html", "4 Connecting to a Database 4.1 Julia 4.2 SAS 4.3 R 4.4 Python 4.5 JSL", " 4 Connecting to a Database 4.1 Julia using DataFrames, DataFramesMeta, ODBC, Lazy dsn=ODBC.DSN(&quot;Driver={ODBC Driver 17 for SQL Server};Address=24.205.251.117;Database=ntsb;UID=ntsb;PWD=Cessna182;&quot;) df=ODBC.query(dsn,&quot;select * from events &quot;) ODBC.disconnect!(dsn) 4.2 SAS /*from proc sql directly*/ /*this is pretty convoluted*/ proc sql; connect to odbc as conn required=&quot;Driver={ODBC Driver 17 for SQL Server};Address=24.205.251.117;Database=ntsb;UID=ntsb;PWD=Cessna182&quot;; create table event as select * from connection to conn (select * from events) ; disconnect from conn; quit; /*by using a libname*/ libname conn2 odbc required =&quot;Driver={ODBC Driver 17 for SQL Server};Address=24.205.251.117;Database=ntsb;UID=ntsb;PWD=Cessna182&quot;; proc sql; create table event as select * from conn2.events ; quit; 4.3 R library(odbc) library(DBI) # note: if files are private, can replace with strings database = rstudioapi::showPrompt(&quot;Database name&quot;,&quot;Database name&quot;) uid = rstudioapi::showPrompt(&quot;Database username&quot;, &quot;Database username&quot;) pwd = rstudioapi::askForPassword(&quot;Database password&quot;) # open connection conn &lt;- dbConnect( odbc(), Driver = &quot;ODBC Driver 17 for SQL Server&quot;, Server = &quot;24.205.251.117&quot;, Database = database, UID = uid, PWD = pwd ) 4.4 Python The driver used for Python may depend on your setup. import pyodbc driver = &quot;{ODBC Driver 17 for SQL Server}&quot; # PC Users # driver = &quot;/usr/local/lib/libmsodbcsql.17.dylib&quot; # Mac Users # note: if files are private, can replace with strings database = input(&quot;Database name: &quot;) username = input(&quot;Username: &quot;) password = getpass.getpass(prompt = &quot;Password: &quot;) # open connection conn = pyodbc.connect( &quot;;&quot;.join([ &quot;Driver=&quot;+driver, &quot;Address=24.205.251.117&quot;, &quot;Database=&quot;+database, &quot;UID=&quot;+username, &quot;PWD=&quot;+password ]) ) 4.5 JSL open database( &quot;Driver={ODBC Driver 17 for SQL Server};Address=24.205.251.117;Database=ntsb;UID=ntsb;PWD=Cessna182&quot;, &quot;select top 20 from events&quot; ) "],
["writing-to-a-database.html", "5 Writing to a Database", " 5 Writing to a Database "],
["querying-a-database.html", "6 Querying a Database", " 6 Querying a Database "]
]
